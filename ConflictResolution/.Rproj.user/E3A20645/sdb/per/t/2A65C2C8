{
    "contents" : "# prediction using individual values, and the before pie\nFrnd.before = sqrt((total$Frnd.A-total$Frnd.before)^2) - sqrt((total$Frnd.B-total$Frnd.before)^2)\nPriv.before = sqrt((total$Priv.A-total$Priv.before)^2) - sqrt((total$Priv.B-total$Priv.before)^2)\nSaf.before = sqrt((total$Saf.A-total$Saf.before)^2) - sqrt((total$Saf.B-total$Saf.before)^2)\nInd.before = sqrt((total$Ind.A-total$Ind.before)^2) - sqrt((total$Ind.B-total$Ind.before)^2)\nRes.before = sqrt((total$Res.A-total$Res.before)^2) - sqrt((total$Res.B-total$Res.before)^2)\n\n# prediction using individual values, and the after pie\nFrnd.after = sqrt((total$Frnd.A-total$Frnd.after)^2) - sqrt((total$Frnd.B-total$Frnd.after)^2)\nPriv.after = sqrt((total$Priv.A-total$Priv.after)^2) - sqrt((total$Priv.B-total$Priv.after)^2)\nSaf.after = sqrt((total$Saf.A-total$Saf.after)^2) - sqrt((total$Saf.B-total$Saf.after)^2)\nInd.after = sqrt((total$Ind.A-total$Ind.after)^2) - sqrt((total$Ind.B-total$Ind.after)^2)\nRes.after = sqrt((total$Res.A-total$Res.after)^2) - sqrt((total$Res.B-total$Res.after)^2)\n\n# prediction using individual values, and the average pie\nFrnd.avg = sqrt((total$Frnd.A-total$Frnd.avg)^2) - sqrt((total$Frnd.B-total$Frnd.avg)^2)\nPriv.avg = sqrt((total$Priv.A-total$Priv.avg)^2) - sqrt((total$Priv.B-total$Priv.avg)^2)\nSaf.avg = sqrt((total$Saf.A-total$Saf.avg)^2) - sqrt((total$Saf.B-total$Saf.avg)^2)\nInd.avg = sqrt((total$Ind.A-total$Ind.avg)^2) - sqrt((total$Ind.B-total$Ind.avg)^2)\nRes.avg = sqrt((total$Res.A-total$Res.avg)^2) - sqrt((total$Res.B-total$Res.avg)^2)\n\n# prediction using concensus, and the before pie\nFrnd.cons.before = sqrt((total$cons.Frnd.A-total$Frnd.before)^2) - sqrt((total$cons.Frnd.B-total$Frnd.before)^2)\nPriv.cons.before = sqrt((total$cons.Priv.A-total$Priv.before)^2) - sqrt((total$cons.Priv.B-total$Priv.before)^2)\nSaf.cons.before = sqrt((total$cons.Saf.A-total$Saf.before)^2) - sqrt((total$cons.Saf.B-total$Saf.before)^2)\nInd.cons.before = sqrt((total$cons.Ind.A-total$Ind.before)^2) - sqrt((total$cons.Ind.B-total$Ind.before)^2)\nRes.cons.before = sqrt((total$cons.Res.A-total$Res.before)^2) - sqrt((total$cons.Res.B-total$Res.before)^2)\n\n# creating prediction data frame\nprediction.data <- data.frame(total$pp,total$gender,total$hasKids,total$userPref,\n                              total$S.A, total$S.B, total$role,\n                              Frnd.before, Priv.before, Saf.before, Ind.before, Res.before,\n                              Frnd.after, Priv.after, Saf.after, Ind.after, Res.after,\n                              Frnd.avg, Priv.avg, Saf.avg, Ind.avg, Res.avg,\n                              Frnd.cons.before, Priv.cons.before, Saf.cons.before, Ind.cons.before, Res.cons.before)\n\ncolnames(prediction.data)[1] <- \"pp\"; \ncolnames(prediction.data)[2] <- \"gender\"; \ncolnames(prediction.data)[3] <- \"hasKids\"; \ncolnames(prediction.data)[4] <- \"userPref\";\nprediction.data$userPref <- prediction.data$userPref-5\nprediction.data <- na.omit(prediction.data)\n\n#creating scenario pairs column\nfor (i in 1:nrow(prediction.data)){\n  if (prediction.data$total.S.A[i]==1 || prediction.data$total.S.A[i]==10)\n    prediction.data$pair[i] <- \"1vs10\"\n  if (prediction.data$total.S.A[i]==2 || prediction.data$total.S.A[i]==9)\n    prediction.data$pair[i] <- \"2vs9\"\n  if (prediction.data$total.S.A[i]==3 || prediction.data$total.S.A[i]==11)\n    prediction.data$pair[i] <- \"3vs11\"\n  if (prediction.data$total.S.A[i]==4 || prediction.data$total.S.A[i]==12)\n    prediction.data$pair[i] <- \"4vs12\"\n  if (prediction.data$total.S.A[i]==5 || prediction.data$total.S.A[i]==16)\n    prediction.data$pair[i] <- \"5vs16\"\n  if (prediction.data$total.S.A[i]==6 || prediction.data$total.S.A[i]==14)\n    prediction.data$pair[i] <- \"6vs14\"\n  if (prediction.data$total.S.A[i]==7 || prediction.data$total.S.A[i]==15)\n    prediction.data$pair[i] <- \"7vs15\"\n  if (prediction.data$total.S.A[i]==8 || prediction.data$total.S.A[i]==13)\n    prediction.data$pair[i] <- \"8vs13\"\n}\n\n#norm type\nfor (i in 1:nrow(prediction.data)){\n  if(prediction.data$total.S.A[i]<=8)\n    prediction.data$norm.type[i] = \"obl\"\n  else\n    prediction.data$norm.type[i] = \"proh\"\n}\n\n# creating the 0-1 columns from silder\nfor(i in 1:nrow(prediction.data)){\n  if (prediction.data$userPref[i]>=0)\n    prediction.data$userPref01[i] = 1\n  else\n    prediction.data$userPref01[i] = 0\n}\n\n# creating tables for individual conflicts, maybe i should add values from pies too\na110 <- prediction.data[prediction.data$pair==\"1vs10\",]\na29 <- prediction.data[prediction.data$pair==\"2vs9\",]\na311 <- prediction.data[prediction.data$pair==\"3vs11\",]\na412 <- prediction.data[prediction.data$pair==\"4vs12\",]\na516 <- prediction.data[prediction.data$pair==\"5vs16\",]\na614 <- prediction.data[prediction.data$pair==\"6vs14\",]\na715 <- prediction.data[prediction.data$pair==\"7vs15\",]\na813 <- prediction.data[prediction.data$pair==\"8vs13\",]\n\n# creating reversed last thirds\nprediction.data.adj <- reverseLastThird(prediction.data, 227)\na110.adj <- reverseLastThird(a110, 281)\na29.adj <- reverseLastThird(a29, 206)\na311.adj <- reverseLastThird(a311, 234)\na412.adj <- reverseLastThird(a412, 145)\na516.adj <- reverseLastThird(a516, 262)\na614.adj <- reverseLastThird(a614, 232)\na715.adj <- reverseLastThird(a715, 277)\na813.adj <- reverseLastThird(a813, 178)\n\n# creating truncated tables\na110.limited<- a110[which(a110$userPref<0 | (a110$userPref>=0 & a110$pp<278)), ]\na29.limited<- a29[which(a29$userPref<0 | (a29$userPref>=0 & a29$pp<193)), ]\na311.limited<- a311[which(a311$userPref<0 | (a311$userPref>=0 & a311$pp<228)), ]\na412.limited<- a412[which(a412$userPref<0 | (a412$userPref>=0 & a412$pp<165)), ]\na516.limited<- a516[which(a516$userPref<0 | (a516$userPref>=0 & a516$pp<262)), ]\na614.limited<- a614[which(a614$userPref<0 | (a614$userPref>=0 & a614$pp<230)), ]\na715.limited<- a715[which(a715$userPref<0 | (a715$userPref>=0 & a715$pp<275)), ]\na813.limited<- a813[which(a813$userPref<0 | (a813$userPref>=0 & a813$pp<178)), ]\n",
    "created" : 1458032188007.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3674071002",
    "id" : "2A65C2C8",
    "lastKnownWriteTime" : 1455799440,
    "path" : "~/Documents/Work/R data/J3Official/predictionDataFrame.R",
    "project_path" : "predictionDataFrame.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}
colnames(stack2)[14] <- "Res.B"
colnames(stack2)[15] <- "gender"; colnames(stack2)[16] <- "hasKids"
stack3 <-  data.frame(J3$pp,J3$s3a,J3$s3b,J3$r3,pie_5.csv,pie_6.csv,J3$gender,J3$hasKids,role)
colnames(stack3)[1] <- "pp"; colnames(stack3)[2] <- "S.A";
colnames(stack3)[3] <- "S.B"; colnames(stack3)[4] <- "userPref";
colnames(stack3)[5] <- "Frnd.A"; colnames(stack3)[6] <- "Priv.A";
colnames(stack3)[7] <- "Saf.A"; colnames(stack3)[8] <- "Ind.A";
colnames(stack3)[9] <- "Res.A"
colnames(stack3)[10] <- "Frnd.B"; colnames(stack3)[11] <- "Priv.B";
colnames(stack3)[12] <- "Saf.B"; colnames(stack3)[13] <- "Ind.B";
colnames(stack3)[14] <- "Res.B"
colnames(stack3)[15] <- "gender"; colnames(stack3)[16] <- "hasKids"
stack4 <-  data.frame(J3$pp,J3$s4a,J3$s4b,J3$r4,pie_7.csv,pie_8.csv,J3$gender,J3$hasKids,role)
colnames(stack4)[1] <- "pp"; colnames(stack4)[2] <- "S.A";
colnames(stack4)[3] <- "S.B"; colnames(stack4)[4] <- "userPref";
colnames(stack4)[5] <- "Frnd.A"; colnames(stack4)[6] <- "Priv.A";
colnames(stack4)[7] <- "Saf.A"; colnames(stack4)[8] <- "Ind.A";
colnames(stack4)[9] <- "Res.A"
colnames(stack4)[10] <- "Frnd.B"; colnames(stack4)[11] <- "Priv.B";
colnames(stack4)[12] <- "Saf.B"; colnames(stack4)[13] <- "Ind.B";
colnames(stack4)[14] <- "Res.B"
colnames(stack4)[15] <- "gender"; colnames(stack4)[16] <- "hasKids"
total <-rbind(data.frame(stack1,stackAB),data.frame(stack2,stackAB),
data.frame(stack3,stackAB),data.frame(stack4,stackAB))
total <- total[with(total, order(pp)), ]
# calculating averages of the two pies
total$Frnd.avg = (total$Frnd.before+total$Frnd.after)/2
total$Priv.avg = (total$Priv.before+total$Priv.after)/2
total$Saf.avg = (total$Frnd.before+total$Saf.after)/2
total$Ind.avg = (total$Priv.before+total$Ind.after)/2
total$Res.avg = (total$Priv.before+total$Res.after)/2
Frnd <-0; Priv <-0; Saf <-0; Ind <-0; Res <-0;
for (i in 1:16) {
xA <- data.frame(total[which(total$S.A==i),])
xA <- data.frame(xA$Frnd.A, xA$Priv.A, xA$Saf.A, xA$Ind.A, xA$Res.A)
colnames(xA)[1] <- "Frnd"; colnames(xA)[2] <- "Priv";
colnames(xA)[3] <- "Saf"; colnames(xA)[4] <- "Ind";
colnames(xA)[5] <- "Res";
xB <- data.frame(total[which(total$S.B==i),])
xB <- data.frame(xB$Frnd.B, xB$Priv.B, xB$Saf.B, xB$Ind.B, xB$Res.B)
colnames(xB)[1] <- "Frnd"; colnames(xB)[2] <- "Priv";
colnames(xB)[3] <- "Saf"; colnames(xB)[4] <- "Ind";
colnames(xB)[5] <- "Res";
x <- rbind(xA,xB)
Frnd[i] = mean(x$Frnd);
Priv[i] = mean(x$Priv);
Saf[i] = mean(x$Saf);
Ind[i] = mean(x$Ind);
Res[i] = mean(x$Res);
Cons <- data.frame(Frnd,Priv,Saf,Ind,Res)
}
remove(Frnd,Priv,Saf,Ind,Res)
for (i in 1:nrow(total)){
total$cons.Frnd.A[i] <- Cons$Frnd[total$S.A[i]]
total$cons.Frnd.B[i] <- Cons$Frnd[total$S.B[i]]
total$cons.Priv.A[i] <- Cons$Priv[total$S.A[i]]
total$cons.Priv.B[i] <- Cons$Priv[total$S.B[i]]
total$cons.Saf.A[i] <- Cons$Saf[total$S.A[i]]
total$cons.Saf.B[i] <- Cons$Saf[total$S.B[i]]
total$cons.Ind.A[i] <- Cons$Ind[total$S.A[i]]
total$cons.Ind.B[i] <- Cons$Ind[total$S.B[i]]
total$cons.Res.A[i] <- Cons$Res[total$S.A[i]]
total$cons.Res.B[i] <- Cons$Res[total$S.B[i]]
}
# pie chart
j <- 16
slices <- c(Cons$Frnd[j], Cons$Priv[j], Cons$Saf[j], Cons$Ind[j], Cons$Res[j])
lbls <- c("Friendship", "Privacy", "Safety", "Independence", "Responsibility")
pie(slices, labels = lbls, main="Values")
# prediction using individual values, and the before pie
Frnd.before = sqrt((total$Frnd.A-total$Frnd.before)^2) - sqrt((total$Frnd.B-total$Frnd.before)^2)
Priv.before = sqrt((total$Priv.A-total$Priv.before)^2) - sqrt((total$Priv.B-total$Priv.before)^2)
Saf.before = sqrt((total$Saf.A-total$Saf.before)^2) - sqrt((total$Saf.B-total$Saf.before)^2)
Ind.before = sqrt((total$Ind.A-total$Ind.before)^2) - sqrt((total$Ind.B-total$Ind.before)^2)
Res.before = sqrt((total$Res.A-total$Res.before)^2) - sqrt((total$Res.B-total$Res.before)^2)
# prediction using individual values, and the after pie
Frnd.after = sqrt((total$Frnd.A-total$Frnd.after)^2) - sqrt((total$Frnd.B-total$Frnd.after)^2)
Priv.after = sqrt((total$Priv.A-total$Priv.after)^2) - sqrt((total$Priv.B-total$Priv.after)^2)
Saf.after = sqrt((total$Saf.A-total$Saf.after)^2) - sqrt((total$Saf.B-total$Saf.after)^2)
Ind.after = sqrt((total$Ind.A-total$Ind.after)^2) - sqrt((total$Ind.B-total$Ind.after)^2)
Res.after = sqrt((total$Res.A-total$Res.after)^2) - sqrt((total$Res.B-total$Res.after)^2)
# prediction using individual values, and the average pie
Frnd.avg = sqrt((total$Frnd.A-total$Frnd.avg)^2) - sqrt((total$Frnd.B-total$Frnd.avg)^2)
Priv.avg = sqrt((total$Priv.A-total$Priv.avg)^2) - sqrt((total$Priv.B-total$Priv.avg)^2)
Saf.avg = sqrt((total$Saf.A-total$Saf.avg)^2) - sqrt((total$Saf.B-total$Saf.avg)^2)
Ind.avg = sqrt((total$Ind.A-total$Ind.avg)^2) - sqrt((total$Ind.B-total$Ind.avg)^2)
Res.avg = sqrt((total$Res.A-total$Res.avg)^2) - sqrt((total$Res.B-total$Res.avg)^2)
# prediction using concensus, and the before pie
Frnd.cons.before = sqrt((total$cons.Frnd.A-total$Frnd.before)^2) - sqrt((total$cons.Frnd.B-total$Frnd.before)^2)
Priv.cons.before = sqrt((total$cons.Priv.A-total$Priv.before)^2) - sqrt((total$cons.Priv.B-total$Priv.before)^2)
Saf.cons.before = sqrt((total$cons.Saf.A-total$Saf.before)^2) - sqrt((total$cons.Saf.B-total$Saf.before)^2)
Ind.cons.before = sqrt((total$cons.Ind.A-total$Ind.before)^2) - sqrt((total$cons.Ind.B-total$Ind.before)^2)
Res.cons.before = sqrt((total$cons.Res.A-total$Res.before)^2) - sqrt((total$cons.Res.B-total$Res.before)^2)
# creating prediction data frame
prediction.data <- data.frame(total$pp,total$gender,total$hasKids,total$userPref,
total$S.A, total$S.B, total$role,
Frnd.before, Priv.before, Saf.before, Ind.before, Res.before,
Frnd.after, Priv.after, Saf.after, Ind.after, Res.after,
Frnd.avg, Priv.avg, Saf.avg, Ind.avg, Res.avg,
Frnd.cons.before, Priv.cons.before, Saf.cons.before, Ind.cons.before, Res.cons.before)
colnames(prediction.data)[1] <- "pp";
colnames(prediction.data)[2] <- "gender";
colnames(prediction.data)[3] <- "hasKids";
colnames(prediction.data)[4] <- "userPref";
prediction.data$userPref <- prediction.data$userPref-5
prediction.data <- na.omit(prediction.data)
#creating scenario pairs column
for (i in 1:nrow(prediction.data)){
if (prediction.data$total.S.A[i]==1 || prediction.data$total.S.A[i]==10)
prediction.data$pair[i] <- "1vs10"
if (prediction.data$total.S.A[i]==2 || prediction.data$total.S.A[i]==9)
prediction.data$pair[i] <- "2vs9"
if (prediction.data$total.S.A[i]==3 || prediction.data$total.S.A[i]==11)
prediction.data$pair[i] <- "3vs11"
if (prediction.data$total.S.A[i]==4 || prediction.data$total.S.A[i]==12)
prediction.data$pair[i] <- "4vs12"
if (prediction.data$total.S.A[i]==5 || prediction.data$total.S.A[i]==16)
prediction.data$pair[i] <- "5vs16"
if (prediction.data$total.S.A[i]==6 || prediction.data$total.S.A[i]==14)
prediction.data$pair[i] <- "6vs14"
if (prediction.data$total.S.A[i]==7 || prediction.data$total.S.A[i]==15)
prediction.data$pair[i] <- "7vs15"
if (prediction.data$total.S.A[i]==8 || prediction.data$total.S.A[i]==13)
prediction.data$pair[i] <- "8vs13"
}
#norm type
for (i in 1:nrow(prediction.data)){
if(prediction.data$total.S.A[i]<=8)
prediction.data$norm.type[i] = "obl"
else
prediction.data$norm.type[i] = "proh"
}
# creating the 0-1 columns from silder
for(i in 1:nrow(prediction.data)){
if (prediction.data$userPref[i]>=0)
prediction.data$userPref01[i] = 1
else
prediction.data$userPref01[i] = 0
}
# creating tables for individual conflicts, maybe i should add values from pies too
a110 <- prediction.data[prediction.data$pair=="1vs10",]
a29 <- prediction.data[prediction.data$pair=="2vs9",]
a311 <- prediction.data[prediction.data$pair=="3vs11",]
a412 <- prediction.data[prediction.data$pair=="4vs12",]
a516 <- prediction.data[prediction.data$pair=="5vs16",]
a614 <- prediction.data[prediction.data$pair=="6vs14",]
a715 <- prediction.data[prediction.data$pair=="7vs15",]
a813 <- prediction.data[prediction.data$pair=="8vs13",]
# creating reversed last thirds
prediction.data.adj <- reverseLastThird(prediction.data, 227)
a110.adj <- reverseLastThird(a110, 281)
a29.adj <- reverseLastThird(a29, 206)
a311.adj <- reverseLastThird(a311, 234)
a412.adj <- reverseLastThird(a412, 145)
a516.adj <- reverseLastThird(a516, 262)
a614.adj <- reverseLastThird(a614, 232)
a715.adj <- reverseLastThird(a715, 277)
a813.adj <- reverseLastThird(a813, 178)
# creating truncated tables
a110.limited<- a110[which(a110$userPref<0 | (a110$userPref>=0 & a110$pp<278)), ]
a29.limited<- a29[which(a29$userPref<0 | (a29$userPref>=0 & a29$pp<193)), ]
a311.limited<- a311[which(a311$userPref<0 | (a311$userPref>=0 & a311$pp<228)), ]
a412.limited<- a412[which(a412$userPref<0 | (a412$userPref>=0 & a412$pp<165)), ]
a516.limited<- a516[which(a516$userPref<0 | (a516$userPref>=0 & a516$pp<262)), ]
a614.limited<- a614[which(a614$userPref<0 | (a614$userPref>=0 & a614$pp<230)), ]
a715.limited<- a715[which(a715$userPref<0 | (a715$userPref>=0 & a715$pp<275)), ]
a813.limited<- a813[which(a813$userPref<0 | (a813$userPref>=0 & a813$pp<178)), ]
#J3 data preparation v2
##--- functions
reverseLastThird <- function(series, startAt){
skipcounter <- 0;
temp <-0;
for (i in 1:nrow(series)){
if (series$pp[i]>=startAt &&
series$userPref01[i] == 1
&& skipcounter%%2==0) {
# reversal process
temp <- series$total.S.A[i]
series$total.S.A[i] <- series$total.S.B[i]
series$total.S.B[i] <- temp
if (series$norm.type[i]=="obl")
series$norm.type[i]<-"proh"
else
series$norm.type[i]<-"obl"
series$userPref[i] <- series$userPref[i]*-1
series$userPref01[i] <- abs(series$userPref01[i]-1)
series$Frnd.before[i] <- series$Frnd.before[i]*-1
series$Priv.before[i] <- series$Priv.before[i]*-1
series$Saf.before[i] <- series$Saf.before[i]*-1
series$Ind.before[i] <- series$Ind.before[i]*-1
series$Res.before[i] <- series$Res.before[i]*-1
series$Frnd.avg[i] <- series$Frnd.avg[i]*-1
series$Priv.avg[i] <- series$Priv.avg[i]*-1
series$Saf.avg[i] <- series$Saf.avg[i]*-1
series$Ind.avg[i] <- series$Ind.avg[i]*-1
series$Res.avg[i] <- series$Res.avg[i]*-1
}
skipcounter <- skipcounter + 1
}
return(series)
}
#---
#imports
libs <- c("xlsx", "geepack", "glmm", "lme4", "nlme")
lapply(libs, require, character.only = TRUE)
#Loading csv files
temp = list.files(pattern="pie*")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
J3 <- read.csv("confResLimited.csv", sep =";")
#specifying role: parent or child
role <- rep("child",nrow(J3))
for (i in 1:nrow(J3))
if (J3$s1a[i]==1 || J3$s1a[i]==4 || J3$s1a[i]==5 || J3$s1a[i]==7 ||
J3$s1a[i]==10 || J3$s1a[i]==12 || J3$s1a[i]==15 ||J3$s1a[i]==16)
role[i]="parent"
#Forming longitudunal data
stackAB <- data.frame(pie_A.csv,pie_B.csv)
colnames(stackAB)[1] <- "Frnd.before"; colnames(stackAB)[2] <- "Priv.before";
colnames(stackAB)[3] <- "Saf.before"; colnames(stackAB)[4] <- "Ind.before";
colnames(stackAB)[5] <- "Res.before"
colnames(stackAB)[6] <- "Frnd.after"; colnames(stackAB)[7] <- "Priv.after";
colnames(stackAB)[8] <- "Saf.after"; colnames(stackAB)[9] <- "Ind.after";
colnames(stackAB)[10] <- "Res.after"
stack1 <-  data.frame(J3$pp,J3$s1a,J3$s1b,J3$r1,pie_1.csv,pie_2.csv,J3$gender,J3$hasKids,role)
colnames(stack1)[1] <- "pp"; colnames(stack1)[2] <- "S.A";
colnames(stack1)[3] <- "S.B"; colnames(stack1)[4] <- "userPref";
colnames(stack1)[5] <- "Frnd.A"; colnames(stack1)[6] <- "Priv.A";
colnames(stack1)[7] <- "Saf.A"; colnames(stack1)[8] <- "Ind.A";
colnames(stack1)[9] <- "Res.A"
colnames(stack1)[10] <- "Frnd.B"; colnames(stack1)[11] <- "Priv.B";
colnames(stack1)[12] <- "Saf.B"; colnames(stack1)[13] <- "Ind.B";
colnames(stack1)[14] <- "Res.B"
colnames(stack1)[15] <- "gender"; colnames(stack1)[16] <- "hasKids";
stack2 <-  data.frame(J3$pp,J3$s2a,J3$s2b,J3$r2,pie_3.csv,pie_4.csv,J3$gender,J3$hasKids,role)
colnames(stack2)[1] <- "pp"; colnames(stack2)[2] <- "S.A";
colnames(stack2)[3] <- "S.B"; colnames(stack2)[4] <- "userPref";
colnames(stack2)[5] <- "Frnd.A"; colnames(stack2)[6] <- "Priv.A";
colnames(stack2)[7] <- "Saf.A"; colnames(stack2)[8] <- "Ind.A";
colnames(stack2)[9] <- "Res.A"
colnames(stack2)[10] <- "Frnd.B"; colnames(stack2)[11] <- "Priv.B";
colnames(stack2)[12] <- "Saf.B"; colnames(stack2)[13] <- "Ind.B";
colnames(stack2)[14] <- "Res.B"
colnames(stack2)[15] <- "gender"; colnames(stack2)[16] <- "hasKids"
stack3 <-  data.frame(J3$pp,J3$s3a,J3$s3b,J3$r3,pie_5.csv,pie_6.csv,J3$gender,J3$hasKids,role)
colnames(stack3)[1] <- "pp"; colnames(stack3)[2] <- "S.A";
colnames(stack3)[3] <- "S.B"; colnames(stack3)[4] <- "userPref";
colnames(stack3)[5] <- "Frnd.A"; colnames(stack3)[6] <- "Priv.A";
colnames(stack3)[7] <- "Saf.A"; colnames(stack3)[8] <- "Ind.A";
colnames(stack3)[9] <- "Res.A"
colnames(stack3)[10] <- "Frnd.B"; colnames(stack3)[11] <- "Priv.B";
colnames(stack3)[12] <- "Saf.B"; colnames(stack3)[13] <- "Ind.B";
colnames(stack3)[14] <- "Res.B"
colnames(stack3)[15] <- "gender"; colnames(stack3)[16] <- "hasKids"
stack4 <-  data.frame(J3$pp,J3$s4a,J3$s4b,J3$r4,pie_7.csv,pie_8.csv,J3$gender,J3$hasKids,role)
colnames(stack4)[1] <- "pp"; colnames(stack4)[2] <- "S.A";
colnames(stack4)[3] <- "S.B"; colnames(stack4)[4] <- "userPref";
colnames(stack4)[5] <- "Frnd.A"; colnames(stack4)[6] <- "Priv.A";
colnames(stack4)[7] <- "Saf.A"; colnames(stack4)[8] <- "Ind.A";
colnames(stack4)[9] <- "Res.A"
colnames(stack4)[10] <- "Frnd.B"; colnames(stack4)[11] <- "Priv.B";
colnames(stack4)[12] <- "Saf.B"; colnames(stack4)[13] <- "Ind.B";
colnames(stack4)[14] <- "Res.B"
colnames(stack4)[15] <- "gender"; colnames(stack4)[16] <- "hasKids"
total <-rbind(data.frame(stack1,stackAB),data.frame(stack2,stackAB),
data.frame(stack3,stackAB),data.frame(stack4,stackAB))
total <- total[with(total, order(pp)), ]
# calculating averages of the two pies
total$Frnd.avg = (total$Frnd.before+total$Frnd.after)/2
total$Priv.avg = (total$Priv.before+total$Priv.after)/2
total$Saf.avg = (total$Frnd.before+total$Saf.after)/2
total$Ind.avg = (total$Priv.before+total$Ind.after)/2
total$Res.avg = (total$Priv.before+total$Res.after)/2
Frnd <-0; Priv <-0; Saf <-0; Ind <-0; Res <-0;
for (i in 1:16) {
xA <- data.frame(total[which(total$S.A==i),])
xA <- data.frame(xA$Frnd.A, xA$Priv.A, xA$Saf.A, xA$Ind.A, xA$Res.A)
colnames(xA)[1] <- "Frnd"; colnames(xA)[2] <- "Priv";
colnames(xA)[3] <- "Saf"; colnames(xA)[4] <- "Ind";
colnames(xA)[5] <- "Res";
xB <- data.frame(total[which(total$S.B==i),])
xB <- data.frame(xB$Frnd.B, xB$Priv.B, xB$Saf.B, xB$Ind.B, xB$Res.B)
colnames(xB)[1] <- "Frnd"; colnames(xB)[2] <- "Priv";
colnames(xB)[3] <- "Saf"; colnames(xB)[4] <- "Ind";
colnames(xB)[5] <- "Res";
x <- rbind(xA,xB)
Frnd[i] = mean(x$Frnd);
Priv[i] = mean(x$Priv);
Saf[i] = mean(x$Saf);
Ind[i] = mean(x$Ind);
Res[i] = mean(x$Res);
Cons <- data.frame(Frnd,Priv,Saf,Ind,Res)
}
remove(Frnd,Priv,Saf,Ind,Res)
for (i in 1:nrow(total)){
total$cons.Frnd.A[i] <- Cons$Frnd[total$S.A[i]]
total$cons.Frnd.B[i] <- Cons$Frnd[total$S.B[i]]
total$cons.Priv.A[i] <- Cons$Priv[total$S.A[i]]
total$cons.Priv.B[i] <- Cons$Priv[total$S.B[i]]
total$cons.Saf.A[i] <- Cons$Saf[total$S.A[i]]
total$cons.Saf.B[i] <- Cons$Saf[total$S.B[i]]
total$cons.Ind.A[i] <- Cons$Ind[total$S.A[i]]
total$cons.Ind.B[i] <- Cons$Ind[total$S.B[i]]
total$cons.Res.A[i] <- Cons$Res[total$S.A[i]]
total$cons.Res.B[i] <- Cons$Res[total$S.B[i]]
}
# pie chart
j <- 16
slices <- c(Cons$Frnd[j], Cons$Priv[j], Cons$Saf[j], Cons$Ind[j], Cons$Res[j])
lbls <- c("Friendship", "Privacy", "Safety", "Independence", "Responsibility")
pie(slices, labels = lbls, main="Values")
# prediction using individual values, and the before pie
Frnd.before = sqrt((total$Frnd.A-total$Frnd.before)^2) - sqrt((total$Frnd.B-total$Frnd.before)^2)
Priv.before = sqrt((total$Priv.A-total$Priv.before)^2) - sqrt((total$Priv.B-total$Priv.before)^2)
Saf.before = sqrt((total$Saf.A-total$Saf.before)^2) - sqrt((total$Saf.B-total$Saf.before)^2)
Ind.before = sqrt((total$Ind.A-total$Ind.before)^2) - sqrt((total$Ind.B-total$Ind.before)^2)
Res.before = sqrt((total$Res.A-total$Res.before)^2) - sqrt((total$Res.B-total$Res.before)^2)
# prediction using individual values, and the after pie
Frnd.after = sqrt((total$Frnd.A-total$Frnd.after)^2) - sqrt((total$Frnd.B-total$Frnd.after)^2)
Priv.after = sqrt((total$Priv.A-total$Priv.after)^2) - sqrt((total$Priv.B-total$Priv.after)^2)
Saf.after = sqrt((total$Saf.A-total$Saf.after)^2) - sqrt((total$Saf.B-total$Saf.after)^2)
Ind.after = sqrt((total$Ind.A-total$Ind.after)^2) - sqrt((total$Ind.B-total$Ind.after)^2)
Res.after = sqrt((total$Res.A-total$Res.after)^2) - sqrt((total$Res.B-total$Res.after)^2)
# prediction using individual values, and the average pie
Frnd.avg = sqrt((total$Frnd.A-total$Frnd.avg)^2) - sqrt((total$Frnd.B-total$Frnd.avg)^2)
Priv.avg = sqrt((total$Priv.A-total$Priv.avg)^2) - sqrt((total$Priv.B-total$Priv.avg)^2)
Saf.avg = sqrt((total$Saf.A-total$Saf.avg)^2) - sqrt((total$Saf.B-total$Saf.avg)^2)
Ind.avg = sqrt((total$Ind.A-total$Ind.avg)^2) - sqrt((total$Ind.B-total$Ind.avg)^2)
Res.avg = sqrt((total$Res.A-total$Res.avg)^2) - sqrt((total$Res.B-total$Res.avg)^2)
# prediction using concensus, and the before pie
Frnd.cons.before = sqrt((total$cons.Frnd.A-total$Frnd.before)^2) - sqrt((total$cons.Frnd.B-total$Frnd.before)^2)
Priv.cons.before = sqrt((total$cons.Priv.A-total$Priv.before)^2) - sqrt((total$cons.Priv.B-total$Priv.before)^2)
Saf.cons.before = sqrt((total$cons.Saf.A-total$Saf.before)^2) - sqrt((total$cons.Saf.B-total$Saf.before)^2)
Ind.cons.before = sqrt((total$cons.Ind.A-total$Ind.before)^2) - sqrt((total$cons.Ind.B-total$Ind.before)^2)
Res.cons.before = sqrt((total$cons.Res.A-total$Res.before)^2) - sqrt((total$cons.Res.B-total$Res.before)^2)
# creating prediction data frame
prediction.data <- data.frame(total$pp,total$gender,total$hasKids,total$userPref,
total$S.A, total$S.B, total$role,
Frnd.before, Priv.before, Saf.before, Ind.before, Res.before,
Frnd.after, Priv.after, Saf.after, Ind.after, Res.after,
Frnd.avg, Priv.avg, Saf.avg, Ind.avg, Res.avg,
Frnd.cons.before, Priv.cons.before, Saf.cons.before, Ind.cons.before, Res.cons.before)
colnames(prediction.data)[1] <- "pp";
colnames(prediction.data)[2] <- "gender";
colnames(prediction.data)[3] <- "hasKids";
colnames(prediction.data)[4] <- "userPref";
prediction.data$userPref <- prediction.data$userPref-5
prediction.data <- na.omit(prediction.data)
#creating scenario pairs column
for (i in 1:nrow(prediction.data)){
if (prediction.data$total.S.A[i]==1 || prediction.data$total.S.A[i]==10)
prediction.data$pair[i] <- "1vs10"
if (prediction.data$total.S.A[i]==2 || prediction.data$total.S.A[i]==9)
prediction.data$pair[i] <- "2vs9"
if (prediction.data$total.S.A[i]==3 || prediction.data$total.S.A[i]==11)
prediction.data$pair[i] <- "3vs11"
if (prediction.data$total.S.A[i]==4 || prediction.data$total.S.A[i]==12)
prediction.data$pair[i] <- "4vs12"
if (prediction.data$total.S.A[i]==5 || prediction.data$total.S.A[i]==16)
prediction.data$pair[i] <- "5vs16"
if (prediction.data$total.S.A[i]==6 || prediction.data$total.S.A[i]==14)
prediction.data$pair[i] <- "6vs14"
if (prediction.data$total.S.A[i]==7 || prediction.data$total.S.A[i]==15)
prediction.data$pair[i] <- "7vs15"
if (prediction.data$total.S.A[i]==8 || prediction.data$total.S.A[i]==13)
prediction.data$pair[i] <- "8vs13"
}
#norm type
for (i in 1:nrow(prediction.data)){
if(prediction.data$total.S.A[i]<=8)
prediction.data$norm.type[i] = "obl"
else
prediction.data$norm.type[i] = "proh"
}
# creating the 0-1 columns from silder
for(i in 1:nrow(prediction.data)){
if (prediction.data$userPref[i]>=0)
prediction.data$userPref01[i] = 1
else
prediction.data$userPref01[i] = 0
}
# creating tables for individual conflicts, maybe i should add values from pies too
a110 <- prediction.data[prediction.data$pair=="1vs10",]
a29 <- prediction.data[prediction.data$pair=="2vs9",]
a311 <- prediction.data[prediction.data$pair=="3vs11",]
a412 <- prediction.data[prediction.data$pair=="4vs12",]
a516 <- prediction.data[prediction.data$pair=="5vs16",]
a614 <- prediction.data[prediction.data$pair=="6vs14",]
a715 <- prediction.data[prediction.data$pair=="7vs15",]
a813 <- prediction.data[prediction.data$pair=="8vs13",]
# creating reversed last thirds
prediction.data.adj <- reverseLastThird(prediction.data, 227)
a110.adj <- reverseLastThird(a110, 281)
a29.adj <- reverseLastThird(a29, 206)
a311.adj <- reverseLastThird(a311, 234)
a412.adj <- reverseLastThird(a412, 145)
a516.adj <- reverseLastThird(a516, 262)
a614.adj <- reverseLastThird(a614, 232)
a715.adj <- reverseLastThird(a715, 277)
a813.adj <- reverseLastThird(a813, 178)
# creating truncated tables
a110.limited<- a110[which(a110$userPref<0 | (a110$userPref>=0 & a110$pp<278)), ]
a29.limited<- a29[which(a29$userPref<0 | (a29$userPref>=0 & a29$pp<193)), ]
a311.limited<- a311[which(a311$userPref<0 | (a311$userPref>=0 & a311$pp<228)), ]
a412.limited<- a412[which(a412$userPref<0 | (a412$userPref>=0 & a412$pp<165)), ]
a516.limited<- a516[which(a516$userPref<0 | (a516$userPref>=0 & a516$pp<262)), ]
a614.limited<- a614[which(a614$userPref<0 | (a614$userPref>=0 & a614$pp<230)), ]
a715.limited<- a715[which(a715$userPref<0 | (a715$userPref>=0 & a715$pp<275)), ]
a813.limited<- a813[which(a813$userPref<0 | (a813$userPref>=0 & a813$pp<178)), ]
currentData <- prediction.data
currentData$pp <- as.factor(currentData$pp)
lme.select.baseline <- lme(userPref01 ~ 1,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.baseline)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.baseline),0))
xtabs(~ predicted + response, data = class)
699+31
730/1067
lme.select.normtype <- lme(userPref01 ~ norm.type,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.normtype),0))
xtabs(~ predicted + response, data = class)
654+174
828/1067
lme.select.values.before <- lme(userPref01 ~ Frnd.before + Priv.before + Saf.before + Ind.before + Res.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.values.before)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.values.before),0))
xtabs(~ predicted + response, data = class)
675+96
771/1067
lme.select.normtype.values.before <- lme(userPref01 ~ norm.type + Frnd.before + Priv.before + Saf.before + Ind.before + Res.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype.values.before)
summary(lme.select.baseline)
summary(lme.select.normtype)
summary(lme.select.values.before)
summary(lme.select.normtype.values.before)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.normtype.values.before),0))
xtabs(~ predicted + response, data = class)
658+172
830/1067
lme.select.values.average <- lme(userPref01 ~ Frnd.average + Priv.average + Saf.average + Ind.average + Res.average,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.values.average)
lme.select.values.consensus <- lme(userPref01 ~ Frnd.cons.before + Priv.cons.before + Saf.cons.before + Ind.cons.before + Res.cons.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.values.consensus)
lme.select.values.avg <- lme(userPref01 ~ Frnd.avg + Priv.avg + Saf.avg + Ind.avg + Res.avg,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.values.avg)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.values.avg),0))
xtabs(~ predicted + response, data = class)
679+68
747/1067
summary(lme.select.values.before)
summary(lme.select.values.before)
summary(lme.select.normtype.values.before)
summary(lme.select.values.consensus)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.values.consensus),0))
xtabs(~ predicted + response, data = class)
667+127
794/1067
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.values.avg),0))
xtabs(~ predicted + response, data = class)
679+68
747/1067
lme.select.normtype.values.avg <- lme(userPref01 ~ norm.type + Frnd.avg + Priv.avg + Saf.avg + Ind.avg + Res.avg,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype.values.avg)
lme.select.normtype.values.consensus <- lme(userPref01 ~ norm.type + Frnd.cons.before + Priv.cons.before + Saf.cons.before + Ind.cons.before + Res.cons.before,
lme.select.normtype.values.consensus <- lme(userPref01 ~ norm.type + Frnd.cons.before + Priv.cons.before + Saf.cons.before + Ind.cons.before + Res.cons.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype.values.consensus)
lme.select.normtype.values.consensus <- lme(userPref01 ~ norm.type + Frnd.cons.before + Priv.cons.before + Saf.cons.before + Ind.cons.before + Res.cons.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype.values.consensus)
lme.select.normtype.values.consensus <- lme(userPref01 ~ norm.type + Frnd.cons.before + Priv.cons.before + Saf.cons.before + Ind.cons.before + Res.cons.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype.values.consensus)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.normtype.values.avg),0))
xtabs(~ predicted + response, data = class)
659+168
827/1067
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.normtype.values.consensus),0))
xtabs(~ predicted + response, data = class)
657+165
822/1067
summary(lme.select.normtype.values.avg)
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.normtype.values.avg),0))
xtabs(~ predicted + response, data = class)
659+168
827/1067
class <- data.frame(predicted = currentData$userPref01, response = round(predict(lme.select.normtype.values.consensus),0))
xtabs(~ predicted + response, data = class)
657+165
822/1067
lme.select.normtype.values.consensus <- lme(userPref01 ~ norm.type + Frnd.cons.before + Priv.cons.before + Saf.cons.before + Ind.cons.before + Res.cons.before,
random = ~1|pp, data = currentData,
correlation = corSymm(form = ~1|pp), method = "ML")
summary(lme.select.normtype.values.consensus)

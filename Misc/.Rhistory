library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
getSymbols(X, from ="2010-1-1")
getSymbols(X, from ="2010-1-1")
getSymbols("X", from ="2010-1-1")
View(X)
View(X)
View(X)
View(X)
barChart(X, log.scale = TRUE)
View(X)
View(X)
addTA(SMA)
addSMA(n=20, col="red")
barChart(X, log.scale = TRUE)
addSMA(n=50, col="red")
returnValue(X)
clear
cls
barChart(X, volatility())
barChart(X, volatility(OHLC, n=10))
periodReturn(X, period="weekly")
plot(periodReturn(X, period="weekly"))
plot(periodReturn(X, period="monthly"))
getSymbols("SNE", from ="2010-1-1")
plot(SNE)
barChart(SNE, log.scale = TRUE)
plot(periodReturn(SNE, period="weekly"))
xs = rnorm( mean=0, sd=1, n=10000)
ys = rnorm( mean=1, sd=1, n=10000)
plot(xs)
xs
ys
typs = rep( x=1, n=10000 )
tps
typs
rep
typs
sig = data.frame( typs, xs, ys )
sig
xx <- (1,2,3)
xx <- (1, 2  , 3)
sne
SNE
data.frame
xx <- c(1,2,3)
xx
yy <- c(4,5,7)
pp <- data.frame(xx,yy)
pp
q = 1
pp <- data.frame(q,xx,yy)
pp
q <-c(1,2)
pp <- data.frame(q,xx,yy)
typs
rep
s = rep(x=1,n=10)
s
plot(s)
s = rep(y=1, n=10)
x
y
s = rep(x=1, n=10)
s
s = rep(x=1, n=100)
colnames(sig) = c("z","x","y")
sig
plot(sig)
sig_train = sig[c(1:5000),]
sig_test = sig[c(5001:10000),]
sig_train
rbind
rbind(xx,yy)
d <- rbind(xx,yy)
d
nnet()
require(nnet)
nnet()
nnet
help nnet
help
help(nnet)
X
X.Close
X$X.Close
x <- X$X.Close
x
y <- X$X.Close
type(y)
y
names(y)
x <- subset(x, select-c(date))
x <- subset(x, select=-c(date))
x <- subset(X, select=-c(date))
x <- subset(X, select=-c(time))
x <- subset(X, select=-c(time))
View(x)
View(x)
View(SNE)
View(X)
View(x)
x = data.frame(X$X.Close)
x
data.frame(date=index(X), coredata(X))
x -< data.frame(date=index(X), coredata(X))
x <- data.frame(date=index(X), coredata(X))
x
View(x)
x <- x$X.Close
x
plot (x)
plot (x, col="l")
plot(x, line)
lineChart(x)
plot(x, method="l")
plot.ts(x)
plot.ts(X)
plot.ts(X$X.Close)
size(x)
x
x
trainingset <- x(1,500)
trainingset <- x[1,500]
trainingset <- x[1:500]
x
x
trainingset
shift <- function(x, n){
c(x[-(seq(n))], rep(NA, n))
}
shift
x
x
trainsize <- 500, testsize <-100
trainsize <- 500
testsize <- 100
data.frame(x[1:trainsize] , x[2:trainsize+1], x[3:trainsize+2])
trainsize+1
trainsize+2
data.frame(x[1:trainsize] , x[2:trainsize], x[3:trainsize])
data.frame(x[1:500] , x[2:501], x[3:502])
data.frame(x[1:(trainsize+0)] , x[2:(trainsize+1)], x[3:(trainsize+2)])
data.frame(x[1:500] , x[2:501], x[3:502])
xtrain <- data.frame(x[1:500] , x[2:501], x[3:502])
xtest <- data.frame(x[504:600] , x[505:601], x[506:602])
ytrain <- data.frame(x[4:503])
ytrain
ytest <- data.frame(x[507:603])
nnet(xtrain,ytrain)
nnet(x=xtrain,y=ytrain, size=10)
net <- nnet(x=xtrain,y=ytrain, size=10)
net
help(nnet)
predict(nnet, ytest)
predict(xtest, ytest)
predict(nnet, xtrain)
c = seq (1,2,3)
c
seq
help(seq)
c = seq (1,20)
c
y <- sin(seq(0, 20, 0.1))
y
plot(y)
te <- data.frame(y, x1=Lag(y), x2=Lag(y,2))
te
names(te) <- c("y", "x1", "x2")
names(te)
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE,
#Grid of tuning parameters to try:
tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
require(cadet)
install.packages(cadet)
install.packages(caret)
install.packages("caret")
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
require(caret)
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
ps <- predict(model, te)
model
plot(y)
ps
lines(ps, col="red")
y ~ x1
y
dd <- y ~ x1
dd
dd <- y ~ x1+x22
dd <- y ~ x1+x2
dd
model <- train(y, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
y <- c(X$X.Close)
y
y <- t(X$X.Close)
y
x <- data.frame(date=index(X), coredata(X))
x
y <- data.frame(coredata(X$X.Close))
y
y <- t(data.frame(coredata(X$X.Close)))
y
View(y)
y <- sin(seq(0, 20, 0.1))
y
y <- data.frame(coredata(X$X.Close))
y <- c(data.frame(coredata(X$X.Close)))
y
y <- sin(seq(0, 20, 0.1))
View(ytrain)
View(ytrain)
y <- data.frame(coredata(X$X.Close))
View(y)
te <- data.frame(y, x1=Lag(y), x2=Lag(y,2))
te
names(te) <- c("y", "x1", "x2")
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
ps <- predict(model, te)
plot(y)
lines(y)
plot(y, type="l")
plot(y, type="n")
plot(y)
y
ps
y
ps
c(ps)
c(y)
err = c(y) - c(ps)
err <- c(y) - c(ps)
err <- y-ps
err
plot(err)
plot(err, type="l")
View(err)
periodReturn(X, period ="weekly")
y = periodReturn(X, period ="weekly")
y = coredata(y)
y
y = coredata(y$weekly.returns)
y = periodReturn(X, period ="weekly")
y = coredata(y$weekly.returns)
y
te <- data.frame(y, x1=Lag(y), x2=Lag(y,2))
names(te) <- c("y", "x1", "x2")
te
model <- train(y, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
plot(y)
plot(y, type="l")
lines(ps, col="red")
lines(ps, col="red")
ps <- predict(model, te)
lines(ps, col="red")
ps
model <- train(y ~ x1 + x2, te, method='nnet', linout=TRUE, trace = FALSE, tuneGrid=expand.grid(.size=c(1,5,10),.decay=c(0,0.001,0.1)))
ps <- predict(model, te)
ps
y
install.packages("RSNNS")
require(RSNNS)
seq(0,10,0.1)
inputs <- as.matrix(seq(0,10,0.1))
inputs
plot(inputs)
runif
runif(10, min=0, max=1)
runif(10, min=0, max=1)
runif(3)
runif(3)
runif(inputs*0.2)
outputs <- as.matrix(sin(inputs) + runif(inputs*0.2))
plot(outputs)
model <- rbf(inputs, outputs, size=40, maxit=1000,             initFuncParams=c(0, 1, 0, 0.01, 0.01),             learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
model <- rbf(inputs, outputs, size=40, maxit=1000, initFuncParams=c(0, 1, 0, 0.01, 0.01),learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
lines(model$fitted.values)
par(mfrow=c(2,1))
plotIterativeError(model)
plot(inputs, outputs)
plot(inputs, fitted(model), type = "l", col="green")
par()
X
require(quantmod)
getSymbols("X", from "2012-1-1")
getSymbols("X", from="2012-1-1")
inputs <- as.matrix(coredata(X$X.Close))
View(inputs)
plot(inputs)
inputs <- lag(as.matrix(coredata(X$X.Close), 1)
s
inputs <- lag(as.matrix(coredata(X$X.Close), k=1)
)
inputs <- lag(as.matrix(coredata(X$X.Close)), k=1)
inputs <- data.frame (lag(as.matrix(coredata(X$X.Close)), k=1), lag(as.matrix(coredata(X$X.Close)), k=2))
View(inputs)
inputs <- lag(as.matrix(coredata(X$X.Close)), k=1)
inputs <- lag(as.matrix(coredata(X$X.Close)), k=2)
inputs <- lag(as.matrix(coredata(X$X.Close)), k=3)
d <- Lag(X$X.Close,k=1:3)
View(d)
inputs <- as.matrix(coredata(Lag(X$X.Close,k=1:3)))
outputs <- as.matrix(coredata(X$X.Close,k=1:3))
View(outputs)
model <- rbf(inputs, outputs, size=3, maxit=1000, initFuncParams=c(0, 1, 0, 0.01, 0.01),learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
model <- rbf(inputs[4:889], outputs[4:889], size=3, maxit=1000, initFuncParams=c(0, 1, 0, 0.01, 0.01),learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
plot(model$fitted.values)
plot(model$fitted.values)
par(mfrow=c(2,1))
plotIterativeError(model)
plot(inputs, outputs)
plot(inputs[4:889], outputs[4:889])
lines(inputs, fitted(model), col="green")
lines(inputs[4:889], fitted(model), col="green")
inputs <- as.matrix(coredata(Lag(X$X.Close,k=1:3)))
outputs <- as.matrix(coredata(X$X.Close,k=1:3))
inputs <- inputs[4:500]
outputs <- outputs[4:500]
inputs
inputs <- as.matrix(coredata(Lag(X$X.Close,k=1:3)))
outputs <- as.matrix(coredata(X$X.Close,k=1:3))
inputs
inputs <- inputs[4:500,]
inputs
outputs <- outputs[4:500]
View(inputs)
inputs <- as.matrix(coredata(Lag(X$X.Close,k=1:3)))
outputs <- as.matrix(coredata(X$X.Close))
View(inputs)
View(outputs)
View(outputs)
View(inputs)
View(outputs)
outputs <- outputs[4:500,]
View(inputs)
outputs
inputs <- as.matrix(coredata(Lag(X$X.Close,k=1:3)))
outputs <- as.matrix(coredata(X$X.Close))
View(outputs)
outputs <- outputs[4:500,]
View(inputs)
model <- rbf(inputs, outputs, size=3, maxit=1000, initFuncParams=c(0, 1, 0, 0.01, 0.01),learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
inputs
View(inputs)
inputs <-as.matrix(inputs[4:500,])
inputs
View(inputs)
outputs <-as.matrix(outputs[4:500,])
outputs <-as.matrix(outputs[4:500])
View(outputs)
outputs <- as.matrix(coredata(X$X.Close))
View(outputs)
outputs <-as.matrix(outputs[4:500])
model <- rbf(inputs, outputs, size=3, maxit=1000, initFuncParams=c(0, 1, 0, 0.01, 0.01),learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
object <- as.matrix(coredata(Lag(X$X.Close,k=1:3)))
object <- as.matrix(object[501:600,])
View(object)
pred <- as.matrix(coredata(X$X.Close))
pred <- as.matrix(pred[501:600])
View(pred)
View(outputs)
View(pred)
View(object)
test <-object
View(object)
clear object
predict(model, test)
plot(test, type="l")
yy <- predict(model, test)
plot(yy, type="l")
plot(yy, type="l")
lines(pred, col ="red")
plot (yy-pred)
plot (absolute(yy-pred))
plot (abs(yy-pred))
mean(abs(yy-pred))
require(xlsx)
full.data.test <- read.csv2("~/Desktop/unclassified j1,j2 files/BSO data/full data test.xlsx", sep="", comment.char="#")
View(full.data.test)
View(full.data.test)
View(full.data.test)
View(full.data.test)
View(full.data.test)
View(full.data.test)
View(full.data.test)
View(full.data.test)
manual
setwd("~/Desktop/unclassified j1,j2 files/BSO data")
data <- read.xlsx("full\ data\ test.xlsx")
data <- read.xlsx("full\ data\ test.xlsx", sheetIndex = 1)
View(data)
data <- read.xlsx("full\ data\ test.xlsx", sheetIndex = 1, rowIndex = 1:1)
data <- read.xlsx("full\ data\ teast.xlsx", sheetIndex = 1, rowIndex = 1:1)
data <- read.xlsx("full\ data\ test.xlsx", sheetIndex = 1, rowIndex = 1:1)
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
View(data)
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
average(data$bq)
mean(data$bq)
sd(data$bq)
data <- read.xlsx("test2.xlsx", sheetIndex = 1)
View(data)
View(data)
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
View(data)
load("~/Desktop/unclassified j1,j2 files/BSO data/test1.xlsx")
data[2:3]=3
data[2:3]=4
data[2,3]=4
data[2,bq]=4
data[2,3]=4
data[2,3]=4
View(data)
View(data)
load("~/Desktop/unclassified j1,j2 files/BSO data/test1.xlsx")
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
data[2,3]=4
data[2,3]=4
data[2,1]=4
data[2,1]="glumble"
data[2,1]=glumble
data[2,1]="glumble"
View(data)
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
data[2,1]="glumble"
View(data)
View(data)
data(data)
datax <- read.xlsx("test1.xlsx", sheetIndex = 1)
data(datax)
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
summary(data)
url = http://ww2.coastal.edu/kingw/statistics/R-tutorials/text/groceries.txt
url = "http://ww2.coastal.edu/kingw/statistics/R-tutorials/text/groceries.txt"
> groceries = read.table(url, header=T)
groceries = read.table(url, header=T)
groceries
View(groceries)
View(groceries)
stack(groceries)
stack(groceries)
View(groceries)
groceries2 = stack(groceries)
View(groceries2)
subject = rep(groceries$subject,4)
groceries2[3] = subject
colnames(groceries2) = c("price", "store", "subject")
with(groceries2, tapply(price, store, sum))
aov.out = aov(price ~ store + Error(subject/store), data=groceries2)
summary(aov.out)
with(groceries2, pairwise.t.test(price, store,
+                    p.adjust.method="holm", paired=T))
with(groceries2, pairwise.t.test(price, store + p.adjust.method="holm", paired=T))
with(groceries2, pairwise.t.test(price, store, p.adjust.method="holm", paired=T))
aov.out = aov(price ~ store + Error(subject/store), data=groceries2)
summary(aov.out)
aov.out = aov(price ~ store + Error(subject/store), data=groceries2)
summary(aov.out)
aov.out = aov(price ~ store, data=groceries2)
summary(aov.out)
with(groceries2, pairwise.t.test(price, store, p.adjust.method="holm", paired=T))
with(groceries2, pairwise.t.test(price, store, paired=T))
pricedouble = data$price *2
pricedouble = data$price
pricedouble <- data$price*2
pricedouble <- groceries2$price*2
data.frame(groceries2,pricedouble)
groceries2 <- data.frame(groceries2,pricedouble)
setwd("~/Documents/R stuff/July 2015")
summary(aov.out)
plot(summary(aov.out))
plot(aov.out)
data <- read.xlsx("test1.xlsx", sheetIndex = 1)
